import Head from "next/head";
import Answer from "../components/Answer";
import Footer from "../components/Footer";
import { useState, useRef } from "react";
import { useRouter } from "next/router";
import * as homeStyles from "../styles/Home.module.css";
import Image from "next/image";
// import 'bootstrap/dist/css/bootstrap.css'
import { supabase } from "../../../utils/supabase";
import { properCase } from "../../../utils/proper-case";
import ImageCarousel from "../components/ImageCarousel";
export default function Home({ bookData }) {
  console.log(bookData);
  const router = useRouter();
  console.log("router", router.query);
  const bookName = router.query.bookName;
  const [showName, setShowName] = useState("");
  if (bookName != undefined && showName == "") {
    setShowName(properCase(bookName));
  }

  const [question, setQuestion] = useState("");
  const [showResult, setShowResult] = useState(false);
  const [gotResult, setGotResult] = useState(true);
  const [result, setResult] = useState("");
  const [passages, setPassages] = useState(["", "", ""]);
  const answerRef = useRef(null);

  function handleChange(event) {
    setQuestion(event.target.value);
  }
  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      generateAnswer();
    }
  };
  async function generateAnswer() {
    let btnSubmit = document.getElementById("btnSubmit");
    if (question === "") {
      return;
    }
    //comment
    btnSubmit.disabled = true;
    setGotResult(false);
    setShowResult(true);
    handleScroll(answerRef.current);
    let check = "false";
    const passageResponse = await fetch("/api/passages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ bookName, question }),
    })
      .then((res) => res.json())
      .then((data) => {
        return data;
      });
    const passageData = passageResponse;
    setPassages([
      passageData.top_3_passages[0]["Content"],
      passageData.top_3_passages[1]["Content"],
      passageData.top_3_passages[2]["Content"],
    ]);
    const answerResponse = await fetch("/api/search", {
      method: "POST",

      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        bookName: bookName,
        question: question,
        passages: passageData.all_passages,
      }),
    });
    const data = answerResponse.body;

    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    let answerResult = "";

    setGotResult(true);

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);
      answerResult += chunkValue;
      setResult(answerResult);
    }

    btnSubmit.disabled = false;
  }

  const handleScroll = (ref) => {
    setTimeout(() => {
      window.scrollTo({
        top: ref.offsetTop,
        left: 100,
        behavior: "smooth",
      });
    }, 50);
  };
  // if(firstLoad){
  //   getColours()
  //   setFirstLoad(false)
  // }

  return (
    <>
      <Head>
        <title>{showName} GPT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main id="main">
        <div className={`px-52`}>
          <div
            className={`mt-20 grid grid-cols-1 rounded-2xl min-h-[600px] lg:grid-cols-2 bg-gradient-to-r from-[#d5d3d1]/50 to-white-500 `}
          >
            <div className="flex flex-col ml-auto mr-auto mt-52">
              <div className="font-bold lg:text-7xl">I&apos;m {showName}</div>
              <div className={"relative mt-20"}>
                <div>
                <input
                  className={`text-xl bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-xl py-4 px-4 block w-full appearance-none leading-normal`}
                  type="input"
                  placeholder=" Ask Me Anything"
                  onChange={handleChange}
                  onKeyDown={handleKeyDown}
                ></input>
                </div>
            
                <div className="absolute inset-y-0 right-5 top-2">
                <button id="btnSubmit" onClick={generateAnswer} type="submit">
                  <svg
                    fill="none"
                    stroke="currentColor"
                    stroke-width="1.5"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                    aria-hidden="true"
                    className="w-10"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
                    ></path>
                  </svg>
                </button>
    
                </div>
              </div>
            </div>
            <div className="flex flex-col items-center pt-10">
                  <ImageCarousel />
                  <div className={'mt-5'}>
                  <a
                    href="https://bamitsmanas.gumroad.com/l/the-most-awesome-atomic-habits-guide-in-the-universe?layout=profile"
                    target="__blank"
                    className="p-3 text-2xl font-bold text-center text-white bg-black rounded-xl"
                  >
                    Actualise Your Potential Now
                  </a>
                </div>
              </div>
            </div> 
            </div>
      

        <div ref={answerRef}>
          {showResult ? (
            <Answer
              bookData={bookData}
              showName={showName}
              gotResult={gotResult}
              answer={result}
              para1={passages[0]}
              para2={passages[1]}
              para3={passages[2]}
            />
          ) : (
            <div></div>
          )}
        </div>
        <Footer />
      </main>
      <style global jsx>
        {`
          body {
            --bg-color: ${bookData.primary};
            --dot-color: ${bookData.secondary};

            /* Dimensions */
            --dot-size: 3px;
            --dot-space: 22px;

            background: linear-gradient(
                  90deg,
                  var(--bg-color) calc(var(--dot-space) - var(--dot-size)),
                  transparent 1%
                )
                center,
              linear-gradient(
                  var(--bg-color) calc(var(--dot-space) - var(--dot-size)),
                  transparent 1%
                )
                center,
              var(--dot-color);
            background-size: var(--dot-space) var(--dot-space);
          }
          a {
            color: inherit;
            text-decoration: none;
          }
          a:active {
            color: inherit;
            text-decoration: none;
          }
          a:hover {
            color: white;
            text-decoration: none;
          }
        `}
      </style>
    </>
  );
}

export async function getServerSideProps(context) {
  const { bookName } = context.query;

  const { data: books, error } = await supabase
    .from("book-database")
    .select("primary_col, secondary_col")
    .eq("book_name", bookName)
    .single();

  if (error) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      bookData: {
        primary: books.primary_col,
        secondary: books.secondary_col,
      },
    },
  };
}
